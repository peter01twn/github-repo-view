{"version":3,"sources":["components/Repo.js","components/RepoList.js","components/Input.js","components/ErrorMsg.js","components/IndefineScroll.js","App.js","serviceWorker.js","index.js"],"names":["Repo","title","desc","url","className","style","display","margin","href","target","RepoList","repos","map","el","key","id","name","description","html_url","Input","onChange","useState","inputText","setInputText","handleSubmit","value","e","onKeyDown","keyCode","onClick","ErrorMsg","children","IndefineScroll","onScroll","ref","useRef","handleScroll","scrollHeight","height","getBoundingClientRect","scrollTop","fetchRepos","search","page","apiQuery","fetch","then","res","json","data","errors","status","error","JSON","stringify","items","catch","App","setSearch","setRepos","setPage","errMsg","setErrMsg","IsFetch","setIsFetch","useEffect","result","padding","textAlign","input","length","setTimeout","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.3a174735.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Repo({ title, desc, url }) {\r\n  return (\r\n    <div className=\"list-item\">\r\n      <div style={{ display: 'flex' }}>\r\n        <h5 style={{ margin: '0 15px 0 0' }}>{title}</h5>\r\n        <a href={url} target=\"_blank\">{url}</a>\r\n      </div>\r\n      <p style={{ margin: '0 0 15px 0' }}>{desc}</p>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport Repo from './Repo'\r\n\r\nexport default function RepoList({repos}) {\r\n  return (\r\n    <div>\r\n      {repos.map(el => <Repo key={el.id} title={el.name} desc={el.description} url={el.html_url} />)}\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nexport default function Input({ onChange }) {\r\n  const [inputText, setInputText] = useState('')\r\n  const handleSubmit = () => {\r\n    onChange(inputText)\r\n  }\r\n  return (\r\n    <>\r\n      <input value={inputText} onChange={e => setInputText(e.target.value)} onKeyDown={e => {\r\n        if (e.keyCode === 13) {\r\n          handleSubmit()\r\n        }\r\n      }}/>\r\n      <button onClick={handleSubmit}>送出</button>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function ErrorMsg({ children }) {\r\n  return (\r\n    <span className=\"err-msg\">\r\n      {children}\r\n    </span>\r\n  )\r\n}\r\n","import React, { useState, useRef } from 'react'\r\n\r\nexport default function IndefineScroll({ onScroll, children }) {\r\n  const ref = useRef()\r\n  const handleScroll = e => {\r\n    const scrollHeight = e.target.scrollHeight\r\n    const height = e.target.getBoundingClientRect().height\r\n    const scrollTop = e.target.scrollTop\r\n    if (scrollTop < (scrollHeight - height - 50) ) {\r\n      onScroll()\r\n    }\r\n  }\r\n  return (\r\n    <div ref={ref} onScroll={e => handleScroll(e)} className=\"infinite-scroll\" >\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react';\nimport RepoList from './components/RepoList'\nimport Input from './components/Input'\nimport ErrorMsg from './components/ErrorMsg'\nimport IndefineScroll from './components/IndefineScroll'\nimport './App.css'\n\nconst fetchRepos = (search, page) => {\n  const apiUrl = 'https://api.github.com/search/repositories?'\n  const apiQuery = `q=user:${search}+is:public&page=${page}&per_page=10&type=Repositories`\n  const url = apiUrl + apiQuery\n  return fetch(url)\n    .then(res => {\n      return res.json()\n    })\n    .then(data => {\n      if (!data.errors) {\n        return {\n          status: true,\n          data: data.items\n        }\n      } else {\n        return {\n          status: false,\n          error: JSON.stringify(data.errors)\n        }\n      }\n    })\n    .catch(error => {\n      return {\n        status: false,\n        error\n      }\n    })\n}\n\nfunction App() {\n  const [search, setSearch] = useState('peter01twn')\n  const [repos, setRepos] = useState([])\n  const [page, setPage] = useState(1)\n  const [errMsg, setErrMsg] = useState('')\n  const [IsFetch, setIsFetch] = useState(false)\n  const handleSearch = input => setSearch(input)\n\n  const LoadMore = () => {\n    if (IsFetch) {\n      return\n    }\n    fetchRepos(search, page + 1)\n      .then(result => {\n        if (result.status) {\n          if (result.data.length > 0) {\n            setRepos([...repos, ...result.data])\n            setPage(page + 1)\n          }\n          setErrMsg('')\n        } else {\n          setErrMsg(JSON.stringify(result.error))\n        }\n      })\n\n    // 設定加載間隔\n    setIsFetch(true)\n    setTimeout(() => {\n      setIsFetch(false)\n    }, 1500);\n  }\n\n  useEffect(() => {\n    setPage(1)\n    fetchRepos(search, 1)\n      .then(result => {\n        if (result.status) {\n          setRepos(result.data)\n          setErrMsg('')\n        } else {\n          setErrMsg(JSON.stringify(result.error))\n        }\n      })\n  }, [search])\n\n  return (\n    <div className=\"App\" style={{ padding: '0 0' }}>\n      <div className=\"container\">\n        <h1 style={{ textAlign: 'center' }}>Search github repositories by user</h1>\n        <Input onChange={handleSearch} />\n        <ErrorMsg>{errMsg}</ErrorMsg>\n        <IndefineScroll onScroll={LoadMore}>\n          <RepoList repos={repos} />\n        </IndefineScroll>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}